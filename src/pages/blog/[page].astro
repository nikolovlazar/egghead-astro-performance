---
import { getCollection, type CollectionEntry } from 'astro:content';
import type { GetStaticPaths, Page } from 'astro';

import Link from '../../components/Link.astro';
import Layout from '../../layouts/Layout.astro';
import PostsList from '../../components/PostsList.astro';

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const posts = await getCollection('blog');

  return paginate(posts, { pageSize: 3 });
};

// In Lesson 10 I'm setting the page's type by directly assigning it
// (const page: Page<CollectionEntry<'blog'>> = ...)
// That won't work in recent versions of Astro because if we don't define
// `type Props`, Astro.props will be a record of type `Record<string, unknown>`
// and we can't cast an `unknown` to the `Page` type.
// To fix this, we need to define `type Props` and set the page type in it,
// instead of casting the `page` constant to it.
type Props = {
  page: Page<CollectionEntry<'blog'>>;
};

const page = Astro.props.page;
---

<Layout seo={{ title: 'Blog posts' }}>
  <h1 class='text-heading-1 mt-8'>Blog posts</h1>
  <PostsList posts={page.data} start={page.start + 1} />

  <div class='mt-8 flex justify-center gap-4'>
    <div class='w-24 text-end'>
      {
        page.url.prev && (
          <Link href={page.url.prev} rel='prev'>
            &lt;&lt; Previous
          </Link>
        )
      }
    </div>
    {page.currentPage}
    <div class='w-24 text-start'>
      {
        page.url.next && (
          <Link href={page.url.next} rel='prev'>
            Next &gt;&gt;
          </Link>
        )
      }
    </div>
  </div>
</Layout>
